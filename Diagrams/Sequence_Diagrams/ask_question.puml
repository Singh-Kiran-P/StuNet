@startuml Ask question

title Reference: [Contract] SubmitQuestion

participant ":QuestionController" as questionController
participant ":UserManager" as userManager
participant ":QuestionSubscription" as questionSubscription
participant ":QuestionNotification" as questionNotification
participant ":Question" as question
participant GetQuestionDto
participant ":GetQuestionDto" as getQuestionDto
participant ":CourseRepository" as courseRepository
participant ":TopicRepository" as topicRepository
participant ":QuestionRepository" as questionRepository
participant ":QuestionSubscriptionRepository" as questionSubscriptionRepository
participant ":CourseSubscriptionRepository" as courseSubscriptionRepository
participant ":NotificationRepository" as notificationRepository

-> questionController: CreateQuestion(createQuestionDto)
activate questionController

alt Valid user
    questionController -> userManager: FindByEmailAsync(userEmail)
    activate userManager
    questionController <-- userManager: User
    ' TOASK: User|null of gewoon User?
    deactivate userManager

    questionController -> courseRepository: GetAsync(createQuestionDto.courseId)
    activate courseRepository
    courseRepository --> questionController: Course | null
    deactivate courseRepository

    loop createQuestionDto.topicIds
        questionController -> topicRepository: GetAsync(id)
        activate topicRepository
        topicRepository --> questionController: Topic | null
        deactivate topicRepository
    end

    alt Course in the database AND All topicss in database
        questionController -> question **:create(createQuestionDto.title, user.id, course, createQuestionDto.body, topics, DateTime.UtcNow)

        questionController -> questionRepository: CreateAsync(question)
        activate questionRepository
        questionRepository --> questionController: void
        deactivate questionRepository

        questionController -> questionSubscription **:create(user.id, question.id, question.time)

        questionController -> questionSubscriptionRepository: CreateAsync(questionSubscription)
        activate questionSubscriptionRepository
        questionSubscriptionRepository -> questionController: void
        deactivate questionSubscriptionRepository

        loop
            questionController -> courseSubscriptionRepository: GetByCourseId(course.id)
            activate courseSubscriptionRepository
            courseSubscriptionRepository --> questionController: SubscriberId
            deactivate courseSubscriptionRepository
        end

        loop
            questionController -> questionNotification**: create(userId, question.id, question, question.time)
        end

        questionController -> notificationRepository: CreateAllAync(questionNotifications)
        activate notificationRepository
        notificationRepository --> questionController: void
        deactivate notificationRepository

        questionController -> GetQuestionDto: convert(question, user)
        activate GetQuestionDto
        GetQuestionDto -> getQuestionDto**: create(question, user)
        GetQuestionDto --> questionController: returnDto
        deactivate GetQuestionDto

        <-- questionController: returnDto
    else Course not in the database OR some topic not in database
        <-- questionController: badRequeset
    end
else Invalid user
    <-- questionController: unauthorized
end

deactivate questionController

@enduml