@startuml Ask Question
participant QuestionController
participant UserManager
participant CourseRepository
participant TopicRepository
participant QuestionRepository
participant QuestionSubscriptionRepository


' DataContext-[hidden]->DataContext

title Reference: Contract SubmitQuestion()

-> QuestionController: CreateQuestion(createQuestionDto)
activate QuestionController
alt Valid user
	QuestionController -> UserManager: FindByEmailAsync(userEmail)
	activate UserManager
	QuestionController <-- UserManager: User
	' TO-ASK: User|null of gewoon User?
	deactivate UserManager

	QuestionController -> CourseRepository: GetAsync(createQuestionDto.courseId)
	activate CourseRepository
	CourseRepository --> QuestionController: Course | null
	deactivate CourseRepository
	
	loop createQuestionDto.topicIds
		QuestionController -> TopicRepository: GetAsync(id)
		activate TopicRepository
		TopicRepository --> QuestionController: Topic | null
		deactivate TopicRepository
	end

	QuestionController -> ":Question" **:create(createQuestionDto.title, user.Id, course, createQuestionDto.body, topics, DateTime.UtcNow)
	'Question -> QuestionController: question

	QuestionController -> QuestionRepository: CreateAsync(question)
	activate QuestionRepository
	QuestionRepository --> QuestionController: void
	deactivate QuestionRepository

	QuestionController -> QuestionSubscription **:create(user.Id, question.id, question.time)
	'Question -> QuestionController: question
	QuestionController -> QuestionSubscriptionRepository: CreateAsync(questionSubscription)
	activate QuestionSubscriptionRepository
	QuestionSubscriptionRepository -> QuestionController: void
	deactivate QuestionSubscriptionRepository

	loop
		QuestionController -> CourseSubscriptionRepository: GetByCourseId(course.id)
		activate CourseSubscriptionRepository
		CourseSubscriptionRepository --> QuestionController: SubscriberId
		deactivate CourseSubscriptionRepository
	end

participant CourseSubscriptionRepository


participant NotificationRepository
	loop 
		QuestionController -> QuestionNotification**: create(userId, question.id, question, question.time)
	end

	QuestionController -> NotificationRepository: CreateAllAync(questionNotifications)
	activate NotificationRepository
	NotificationRepository --> QuestionController: void
	deactivate NotificationRepository

	QuestionController -> returnDto**: create(question, user)
	<-- QuestionController: returnDto
@enduml
